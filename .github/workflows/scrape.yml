name: Scrape and Save Page

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to scrape'
        required: true
        type: string

jobs:
  scrape-page:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
      
      # Install Chrome and ChromeDriver
      - name: Install Chrome and ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
          wget -q "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION"
          CHROMEDRIVER_VERSION=$(cat "LATEST_RELEASE_$CHROME_VERSION")
          wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
      
      # Install project dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp beautifulsoup4 selenium webdriver_manager
      
      # Ensure url_patterns.json exists
      - name: Prepare URL patterns file
        run: |
          touch url_patterns.json
          [ -s url_patterns.json ] || echo "{}" > url_patterns.json
      
      # Run the scraper with the provided URL
      - name: Scrape and save page
        env:
          TARGET_URL: ${{ github.event.inputs.target_url }}
        run: |
          python scraper.py "$TARGET_URL"
      
      # Commit and push any changes
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          
          # Ensure sites directory exists
          mkdir -p sites
          
          # Stage relevant files
          git add -f url_patterns.json
          git add -f sites/
          
          # Check for changes and commit if needed
          if [[ -n "$(git status --porcelain)" ]]; then
            git commit -m "Scrape: ${{ github.event.inputs.target_url }}"
            git push
          fi
